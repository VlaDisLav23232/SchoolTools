import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import math

st.set_page_config(
    page_title="–®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫",
    page_icon="üéì",
    layout="centered"
)

st.sidebar.title("üéì –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
page = st.sidebar.radio(
    "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
    ["üè† –¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "üìâ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞"]
)

# --- 1. –¢–ò–¢–£–õ–¨–ù–ê –°–¢–û–†–Ü–ù–ö–ê ---
if page == "üè† –¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞":
    st.title("üéì –®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫")
    st.subheader("–¢–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –∑–Ω–∞–Ω—å")
    st.markdown("""
    üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ **–®–∫—ñ–ª—å–Ω–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞** ‚Äî –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ:

    - üîÅ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –æ–¥–∏–Ω–∏—Ü—ñ –º–∞—Å–∏, —á–∞—Å—É, –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤
    - üßÆ –û–±—á–∏—Å–ª—é–≤–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
    - üìÖ –£ –º–∞–π–±—É—Ç–Ω—å–æ–º—É ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–¥—ñ–π
    
    –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ, —â–æ–± –ø–æ—á–∞—Ç–∏.
    """)

# --- 2. –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ---
elif page == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
    st.header("üßÆ –ü—Ä–æ—Å—Ç–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

    num1 = st.number_input("–ü–µ—Ä—à–µ —á–∏—Å–ª–æ", value=0.0)
    operation = st.selectbox("–û–ø–µ—Ä–∞—Ü—ñ—è", ["–î–æ–¥–∞–≤–∞–Ω–Ω—è", "–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", "–ú–Ω–æ–∂–µ–Ω–Ω—è", "–î—ñ–ª–µ–Ω–Ω—è"])
    num2 = st.number_input("–î—Ä—É–≥–µ —á–∏—Å–ª–æ", value=0.0)

    result = None
    if operation == "–î–æ–¥–∞–≤–∞–Ω–Ω—è":
        result = num1 + num2
    elif operation == "–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è":
        result = num1 - num2
    elif operation == "–ú–Ω–æ–∂–µ–Ω–Ω—è":
        result = num1 * num2
    elif operation == "–î—ñ–ª–µ–Ω–Ω—è":
        if num2 != 0:
            result = num1 / num2
        else:
            st.error("‚ùå –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ!")

    if result is not None:
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

# --- 3. –ö–û–ù–í–ï–†–¢–ï–† ---
elif page == "üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä":
    st.header("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–µ–ª–∏—á–∏–Ω")
    conversion_type = st.selectbox("–©–æ —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏?", ["–ú–∞—Å–∞", "–ß–∞—Å", "–ü—Ä–µ—Ñ—ñ–∫—Å–∏"])

    if conversion_type == "–ú–∞—Å–∞":
        mass_units = {"–≥": 1, "–∫–≥": 1000, "—Ç": 1000000}
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:", min_value=0.0)
        from_unit = st.selectbox("–ó–≤—ñ–¥–∫–∏:", mass_units.keys(), key="mass_from")
        to_unit = st.selectbox("–ö—É–¥–∏:", mass_units.keys(), key="mass_to")
        result = value * mass_units[from_unit] / mass_units[to_unit]
        st.success(f"{value} {from_unit} = {result} {to_unit}")

    elif conversion_type == "–ß–∞—Å":
        time_units = {"—Å": 1, "—Ö–≤": 60, "–≥–æ–¥": 3600}
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å:", min_value=0.0)
        from_unit = st.selectbox("–ó–≤—ñ–¥–∫–∏:", time_units.keys(), key="time_from")
        to_unit = st.selectbox("–ö—É–¥–∏:", time_units.keys(), key="time_to")
        result = value * time_units[from_unit] / time_units[to_unit]
        st.success(f"{value} {from_unit} = {result} {to_unit}")

    elif conversion_type == "–ü—Ä–µ—Ñ—ñ–∫—Å–∏":
        prefixes = {
            "–¢–µ—Ä–∞ (–¢)": 1e12,
            "–ì—ñ–≥–∞ (–ì)": 1e9,
            "–ú–µ–≥–∞ (–ú)": 1e6,
            "–ö—ñ–ª–æ (–∫)": 1e3,
            "–û–¥–∏–Ω–∏—Ü—è": 1,
            "–º—ñ–ª—ñ (–º)": 1e-3,
            "–º—ñ–∫—Ä–æ (–º–∫)": 1e-6,
            "–Ω–∞–Ω–æ (–Ω)": 1e-9,
        }
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:", min_value=0.0)
        from_prefix = st.selectbox("–ó–≤—ñ–¥–∫–∏:", prefixes.keys(), key="prefix_from")
        to_prefix = st.selectbox("–ö—É–¥–∏:", prefixes.keys(), key="prefix_to")
        result = value * prefixes[from_prefix] / prefixes[to_prefix]
        st.success(f"{value} {from_prefix} = {result} {to_prefix}")

# --- 4. –ì–†–ê–§–Ü–ö –§–£–ù–ö–¶–Ü–á ---
elif page == "üìâ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞":
    st.header("üìâ –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó")

    st.markdown("""
    ‚úçÔ∏è –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É —Ö–æ—á–µ—à –ø–æ–±—É–¥—É–≤–∞—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `x**2`, `sin(x) + x`, `exp(-x**2)`
    """)

    func_input = st.text_input("–§—É–Ω–∫—Ü—ñ—è f(x):", "sin(x)")
    x_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è x", value=-10.0)
    x_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è x", value=10.0)

    x = np.linspace(x_min, x_max, 500)

    try:
        y = [eval(func_input, {
            "x": val,
            "sin": math.sin,
            "cos": math.cos,
            "tan": math.tan,
            "exp": math.exp,
            "log": math.log,
            "sqrt": math.sqrt,
            "__builtins__": {}
        }) for val in x]

        fig, ax = plt.subplots()
        ax.plot(x, y, label=f"f(x) = {func_input}", color="blue")
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º—É–ª—ñ: {e}")
