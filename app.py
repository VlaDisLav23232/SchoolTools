import streamlit as st
import matplotlib.pyplot as plt

import numpy as np
import math
import datetime


st.set_page_config(
    page_title="–®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫",
    page_icon="üéì",
    layout="centered"
)



st.sidebar.title("üéì –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
page = st.sidebar.radio(
    "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
    ["üè† –¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "üìâ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞", "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –î–ó", "‚ûó –ù–°–î, –ù–°–ö —Ç–∞ –°–ê", "üìö –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞–ª–∏—Ö", "ü§´ –°–µ–∫—Ä–µ—Ç"]
)

# --- 1. –¢–ò–¢–£–õ–¨–ù–ê –°–¢–û–†–Ü–ù–ö–ê ---
if page == "üè† –¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞":
    st.title("üéì –®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫")
    st.markdown("---")
    
    st.markdown("""
    ## üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!
    
    **–®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫** ‚Äî —Ü–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É—á–Ω—ñ–≤, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —É –Ω–∞–≤—á–∞–Ω–Ω—ñ. 
    –ù–∞—à –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –æ–±'—î–¥–Ω—É—î –Ω–∞–π–Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—à—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ.
    
    ### üöÄ –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    """)
    
    # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π –∑ —ñ–∫–æ–Ω–∫–∞–º–∏
    features = [
        ("üßÆ", "**–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä**", "–®–≤–∏–¥–∫—ñ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è"),
        ("üîÅ", "**–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω**", "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –º–∞—Å–∏, —á–∞—Å—É —Ç–∞ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤"),
        ("üìâ", "**–ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤**", "–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"),
        ("üìÖ", "**–ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–≤–¥–∞–Ω—å**", "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å"),
        ("‚ûó", "**–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó**", "–ù–°–î, –ù–°–ö —Ç–∞ —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ"),
        ("üìö", "**–î–æ–≤—ñ–¥–Ω–∏–∫ —Å—Ç–∞–ª–∏—Ö**", "–§—ñ–∑–∏—á–Ω—ñ —Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏")
    ]
    
    for icon, title, description in features:
        st.markdown(f"{icon} {title} ‚Äî {description}")


# --- 2. –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ---
elif page == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
    st.header("üßÆ –ü—Ä–æ—Å—Ç–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

    num1 = st.number_input("–ü–µ—Ä—à–µ —á–∏—Å–ª–æ", value=0.0)
    operation = st.selectbox("–û–ø–µ—Ä–∞—Ü—ñ—è", ["–î–æ–¥–∞–≤–∞–Ω–Ω—è", "–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", "–ú–Ω–æ–∂–µ–Ω–Ω—è", "–î—ñ–ª–µ–Ω–Ω—è"])
    num2 = st.number_input("–î—Ä—É–≥–µ —á–∏—Å–ª–æ", value=0.0)

    result = None
    if operation == "–î–æ–¥–∞–≤–∞–Ω–Ω—è":
        result = num1 + num2
    elif operation == "–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è":
        result = num1 - num2
    elif operation == "–ú–Ω–æ–∂–µ–Ω–Ω—è":
        result = num1 * num2
    elif operation == "–î—ñ–ª–µ–Ω–Ω—è":
        if num2 != 0:
            result = num1 / num2
        else:
            st.error("‚ùå –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ!")

    if result is not None:
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

# --- 3. –ö–û–ù–í–ï–†–¢–ï–† ---
elif page == "üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä":
    st.header("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–µ–ª–∏—á–∏–Ω")
    conversion_type = st.selectbox("–©–æ —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏?", ["–ú–∞—Å–∞", "–ß–∞—Å", "–ü—Ä–µ—Ñ—ñ–∫—Å–∏"])

    if conversion_type == "–ú–∞—Å–∞":
        mass_units = {"–≥": 1, "–∫–≥": 1000, "—Ç": 1000000}
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:", min_value=0.0)
        from_unit = st.selectbox("–ó–≤—ñ–¥–∫–∏:", mass_units.keys(), key="mass_from")
        to_unit = st.selectbox("–ö—É–¥–∏:", mass_units.keys(), key="mass_to")
        result = value * mass_units[from_unit] / mass_units[to_unit]
        st.success(f"{value} {from_unit} = {result} {to_unit}")

    elif conversion_type == "–ß–∞—Å":
        time_units = {"—Å": 1, "—Ö–≤": 60, "–≥–æ–¥": 3600}
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å:", min_value=0.0)
        from_unit = st.selectbox("–ó–≤—ñ–¥–∫–∏:", time_units.keys(), key="time_from")
        to_unit = st.selectbox("–ö—É–¥–∏:", time_units.keys(), key="time_to")
        result = value * time_units[from_unit] / time_units[to_unit]
        st.success(f"{value} {from_unit} = {result} {to_unit}")

    elif conversion_type == "–ü—Ä–µ—Ñ—ñ–∫—Å–∏":
        prefixes = {
            "–¢–µ—Ä–∞ (–¢)": 1e12,
            "–ì—ñ–≥–∞ (–ì)": 1e9,
            "–ú–µ–≥–∞ (–ú)": 1e6,
            "–ö—ñ–ª–æ (–∫)": 1e3,
            "–û–¥–∏–Ω–∏—Ü—è": 1,
            "–º—ñ–ª—ñ (–º)": 1e-3,
            "–º—ñ–∫—Ä–æ (–º–∫)": 1e-6,
            "–Ω–∞–Ω–æ (–Ω)": 1e-9,
        }
        value = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:", min_value=0.0)
        from_prefix = st.selectbox("–ó–≤—ñ–¥–∫–∏:", prefixes.keys(), key="prefix_from")
        to_prefix = st.selectbox("–ö—É–¥–∏:", prefixes.keys(), key="prefix_to")
        result = value * prefixes[from_prefix] / prefixes[to_prefix]
        st.success(f"{value} {from_prefix} = {result} {to_prefix}")

# --- 4. –ì–†–ê–§–Ü–ö –§–£–ù–ö–¶–Ü–á ---
elif page == "üìâ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞":
    st.header("üìâ –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó")

    st.markdown("""
    ‚úçÔ∏è –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É —Ö–æ—á–µ—à –ø–æ–±—É–¥—É–≤–∞—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `x**2`, `sin(x) + x`, `exp(-x**2)`
    """)

    func_input = st.text_input("–§—É–Ω–∫—Ü—ñ—è f(x):", "sin(x)")
    x_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è x", value=-10.0)
    x_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è x", value=10.0)

    x = np.linspace(x_min, x_max, 500)

    try:
        y = [eval(func_input, {
            "x": val,
            "sin": math.sin,
            "cos": math.cos,
            "tan": math.tan,
            "exp": math.exp,
            "log": math.log,
            "sqrt": math.sqrt,
            "__builtins__": {}
        }) for val in x]

        fig, ax = plt.subplots()
        ax.plot(x, y, label=f"f(x) = {func_input}", color="blue")
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º—É–ª—ñ: {e}")


# üìÖ –ö–ê–õ–ï–ù–î–ê–† –ó –î–ó
if "calendar_hw" not in st.session_state:
    st.session_state.calendar_hw = []
elif page == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –î–ó":
    st.title("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –î–ó
    st.subheader("‚ûï –î–æ–¥–∞—Ç–∏ –î–ó –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
    with st.form("add_hw_calendar_form"):
        subject = st.text_input("–ü—Ä–µ–¥–º–µ—Ç")
        hw_date = st.date_input("–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", min_value=datetime.date.today())
        description = st.text_area("–û–ø–∏—Å –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è")
        submitted = st.form_submit_button("–î–æ–¥–∞—Ç–∏")

        if submitted and subject:
            st.session_state.calendar_hw.append({
                "–ü—Ä–µ–¥–º–µ—Ç": subject,
                "–î–∞—Ç–∞": hw_date,
                "–û–ø–∏—Å": description,
                "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ": False
            })
            st.success("‚úÖ –î–ó –¥–æ–¥–∞–Ω–æ!")

    # –ü–µ—Ä–µ–≥–ª—è–¥ –î–ó —É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
    st.subheader("üìñ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–∞–º–∏")
    if st.session_state.calendar_hw:
        selected_date = st.date_input("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
        filtered = [task for task in st.session_state.calendar_hw if task["–î–∞—Ç–∞"] == selected_date]

        if filtered:
            for i, task in enumerate(filtered):
                cols = st.columns([3, 4, 2, 1])
                cols[0].markdown(f"**{task['–ü—Ä–µ–¥–º–µ—Ç']}**")
                cols[1].markdown(task["–û–ø–∏—Å"])
                done = cols[2].checkbox("–ì–æ—Ç–æ–≤–æ", value=task["‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ"], key=f"cal_done_{i}")
                if cols[3].button("‚ùå", key=f"del_{i}"):
                    st.session_state.calendar_hw.remove(task)
                    st.rerun()
                task["‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ"] = done
        else:
            st.info("–ù–µ–º–∞—î –î–ó –Ω–∞ —Ü—é –¥–∞—Ç—É.")
    else:
        st.info("–ü–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–Ω–æ.")

# --- 5. –ù–°–î, –ù–°–ö —Ç–∞ –°–ê ---
elif page == "‚ûó –ù–°–î, –ù–°–ö —Ç–∞ –°–ê":
    st.header("‚ûó –ù–°–î, –ù–°–ö —Ç–∞ –°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ")
    conversion_type = st.selectbox("–©–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏?", ["–ù–°–î", "–ù–°–ö", "–°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ"])
    if conversion_type=="–ù–°–î":
        if "nsd_values" not in st.session_state:
            st.session_state.nsd_values = [1.0, 1.0]

        st.subheader("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ –¥–ª—è –ù–°–î:")

        for i, val in enumerate(st.session_state.nsd_values):
            st.session_state.nsd_values[i] = st.number_input(
                f"–ß–∏—Å–ª–æ {i+1}:",
                value=val,
                min_value=1.0,
                step=1.0,
                key=f"nsd_input_{i}"
            )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ûï –î–æ–¥–∞—Ç–∏ —á–∏—Å–ª–æ"):
                st.session_state.nsd_values.append(1.0)
                st.rerun()

        with col2:
            if len(st.session_state.nsd_values) > 2:
                if st.button("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î"):
                    st.session_state.nsd_values.pop()
                    st.rerun()

        if st.button("–û–±—á–∏—Å–ª–∏—Ç–∏ –ù–°–î"):
            def gcd_multiple(numbers):
                """
                –û–±—á–∏—Å–ª—é—î –ù–°–î –¥–ª—è —Å–ø–∏—Å–∫—É —á–∏—Å–µ–ª
                """
                resulter = int(numbers[0])
                for l in range(1, len(numbers)):
                    resulter = math.gcd(resulter, int(numbers[l]))
                return resulter

            try:
                result = gcd_multiple(st.session_state.nsd_values)
                st.success(f"–ù–°–î —á–∏—Å–µ–ª {[int(x) for x in st.session_state.nsd_values]} = {result}")
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è. {e}")

    elif conversion_type=="–ù–°–ö":
        if "lcm_values" not in st.session_state:
            st.session_state.lcm_values = [1.0, 1.0]

        st.subheader("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ –¥–ª—è –ù–°–ö:")

        for i, val in enumerate(st.session_state.lcm_values):
            st.session_state.lcm_values[i] = st.number_input(
                f"–ß–∏—Å–ª–æ {i+1}:",
                value=val,
                min_value=1.0,
                step=1.0,
                key=f"lcm_input_{i}"
            )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ûï –î–æ–¥–∞—Ç–∏ —á–∏—Å–ª–æ"):
                st.session_state.lcm_values.append(1.0)
                st.rerun()

        with col2:
            if len(st.session_state.lcm_values) > 2:
                if st.button("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î"):
                    st.session_state.lcm_values.pop()
                    st.rerun()

        if st.button("–û–±—á–∏—Å–ª–∏—Ç–∏ –ù–°–ö"):
            def lcm_multiple(numbers):
                """
                –û–±—á–∏—Å–ª—é—î –ù–°–ö –¥–ª—è —Å–ø–∏—Å–∫—É —á–∏—Å–µ–ª
                """
                resulter = int(numbers[0])
                for l in range(1, len(numbers)):
                    resulter = math.lcm(resulter, int(numbers[l]))
                return resulter

            try:
                result = lcm_multiple(st.session_state.lcm_values)
                st.success(f"–ù–°–ö —á–∏—Å–µ–ª {[int(x) for x in st.session_state.lcm_values]} = {result}")
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è. {e}")
    elif conversion_type=="–°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ":
        if "average_values" not in st.session_state:
            st.session_state.average_values = [1.0, 1.0]

        st.subheader("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–æ–≥–æ:")

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        for i, val in enumerate(st.session_state.average_values):
            st.session_state.average_values[i] = st.number_input(
                f"–ß–∏—Å–ª–æ {i+1}:",
                value=val,
                min_value=1.0,
                step=1.0,
                key=f"average_input_{i}"
            )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ûï –î–æ–¥–∞—Ç–∏ —á–∏—Å–ª–æ"):
                st.session_state.average_values.append(1.0)
                st.rerun()

        with col2:
            if len(st.session_state.average_values) > 2:
                if st.button("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î"):
                    st.session_state.average_values.pop()
                    st.rerun()

        if st.button("–û–±—á–∏—Å–ª–∏—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ"):
            def average_multiple(numbers):
                """
                –û–±—á–∏—Å–ª—é—î —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ –¥–ª—è —Å–ø–∏—Å–∫—É —á–∏—Å–µ–ª
                """
                return sum(numbers) / len(numbers)

            try:
                result = average_multiple(st.session_state.average_values)
                st.success(f"–°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ —á–∏—Å–µ–ª {[int(x) for x in st.session_state.average_values]} = {result}")
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è. {e}")

elif page == "üìö –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞–ª–∏—Ö":
    st.title("üìö –§—ñ–∑–∏—á–Ω—ñ —Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Å—Ç–∞–ª—ñ")

    constants_data = [
        {"–ù–∞–∑–≤–∞": "–®–≤–∏–¥–∫—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ —É –≤–∞–∫—É—É–º—ñ", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "c", "–ó–Ω–∞—á–µ–Ω–Ω—è": "299 792 458", "–û–¥–∏–Ω–∏—Ü—ñ": "–º/—Å"},
        {"–ù–∞–∑–≤–∞": "–ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ–π–Ω–∞ —Å—Ç–∞–ª–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "G", "–ó–Ω–∞—á–µ–Ω–Ω—è": "6.67430 √ó 10‚Åª¬π¬π", "–û–¥–∏–Ω–∏—Ü—ñ": "–º¬≥/–∫–≥¬∑—Å¬≤"},
        {"–ù–∞–∑–≤–∞": "–ó–∞—Ä—è–¥ –µ–ª–µ–∫—Ç—Ä–æ–Ω–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "e", "–ó–Ω–∞—á–µ–Ω–Ω—è": "1.602176634 √ó 10‚Åª¬π‚Åπ", "–û–¥–∏–Ω–∏—Ü—ñ": "–ö–ª"},
        {"–ù–∞–∑–≤–∞": "–ü–æ—Å—Ç—ñ–π–Ω–∞ –ü–ª–∞–Ω–∫–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "h", "–ó–Ω–∞—á–µ–Ω–Ω—è": "6.62607015 √ó 10‚Åª¬≥‚Å¥", "–û–¥–∏–Ω–∏—Ü—ñ": "–î–∂¬∑—Å"},
        {"–ù–∞–∑–≤–∞": "–ú–∞—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "me", "–ó–Ω–∞—á–µ–Ω–Ω—è": "9.10938356 √ó 10‚Åª¬≥¬π", "–û–¥–∏–Ω–∏—Ü—ñ": "–∫–≥"},
        {"–ù–∞–∑–≤–∞": "–ú–∞—Å–∞ –ø—Ä–æ—Ç–æ–Ω–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "mp", "–ó–Ω–∞—á–µ–Ω–Ω—è": "1.6726219 √ó 10‚Åª¬≤‚Å∑", "–û–¥–∏–Ω–∏—Ü—ñ": "–∫–≥"},
        {"–ù–∞–∑–≤–∞": "–ü–æ—Å—Ç—ñ–π–Ω–∞ –ê–≤–æ–≥–∞–¥—Ä–æ", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "NA", "–ó–Ω–∞—á–µ–Ω–Ω—è": "6.02214076 √ó 10¬≤¬≥", "–û–¥–∏–Ω–∏—Ü—ñ": "1/–º–æ–ª—å"},
        {"–ù–∞–∑–≤–∞": "–ì–∞–∑–æ–≤–∞ —Å—Ç–∞–ª–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "R", "–ó–Ω–∞—á–µ–Ω–Ω—è": "8.314", "–û–¥–∏–Ω–∏—Ü—ñ": "–î–∂/–º–æ–ª—å¬∑–ö"},
        {"–ù–∞–∑–≤–∞": "–ü—ñ (–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∫–æ–ª–∞ –¥–æ –¥—ñ–∞–º–µ—Ç—Ä–∞)", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "œÄ", "–ó–Ω–∞—á–µ–Ω–Ω—è": "3.1415926535", "–û–¥–∏–Ω–∏—Ü—ñ": "‚Äî"},
        {"–ù–∞–∑–≤–∞": "–ï–π–ª–µ—Ä–æ–≤–∞ —Å—Ç–∞–ª–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è": "e", "–ó–Ω–∞—á–µ–Ω–Ω—è": "2.7182818284", "–û–¥–∏–Ω–∏—Ü—ñ": "‚Äî"},
    ]

    st.dataframe(constants_data, use_container_width=True)

# --- 6. –°–ï–ö–†–ï–¢–ù–ê –°–¢–û–†–Ü–ù–ö–ê ---
elif page == "ü§´ –°–µ–∫—Ä–µ—Ç":
    st.title("ü§´ –°–µ–∫—Ä–µ—Ç–Ω–∞ –°—Ç–æ—Ä—ñ–Ω–∫–∞")

    st.markdown("""–¢–∏ –∑–Ω–∞–π—à–æ–≤ —Å–µ–∫—Ä–µ—Ç–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É! –û—Å—å —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ –¥–ª—è —Ç–µ–±–µ:
    """)

    # Video placeholder
    st.video("https://www.youtube.com/watch?v=dQw4w9WgXcQ")

    st.markdown("""–¢—Ä–∏–º–∞–π —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤ —Å–µ–∫—Ä–µ—Ç—ñ –≤—ñ–¥ —ñ–Ω—à–∏—Ö...""")

    st.balloons()
# --- 6. –°–ï–ö–†–ï–¢–ù–ê –°–¢–û–†–Ü–ù–ö–ê ---
elif page == "ü§´ –°–µ–∫—Ä–µ—Ç":
    st.title("ü§´ –°–µ–∫—Ä–µ—Ç–Ω–∞ –°—Ç–æ—Ä—ñ–Ω–∫–∞")

    st.markdown("""–¢–∏ –∑–Ω–∞–π—à–æ–≤ —Å–µ–∫—Ä–µ—Ç–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É! –û—Å—å —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ –¥–ª—è —Ç–µ–±–µ:
    """)

    # Video placeholder
    st.video("https://www.youtube.com/watch?v=dQw4w9WgXcQ")

    st.markdown("""–¢—Ä–∏–º–∞–π —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤ —Å–µ–∫—Ä–µ—Ç—ñ –≤—ñ–¥ —ñ–Ω—à–∏—Ö...""")

    st.balloons()
